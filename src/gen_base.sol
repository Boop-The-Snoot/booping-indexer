/** AUTOGENERATED CODE BY GHOSTGRAPH CODEGEN **/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "./gen_schema.sol";
import "./gen_events.sol";
import { EventDetails } from "./gen_helpers.sol";

enum GhostEventName {
    Unpaused,
    UnclaimedRewardsWithdrawn,
    TotalRewardsClaimed,
    TokenWhitelisted,
    TokenWhitelistRemoved,
    RoleRevoked,
    RoleGranted,
    RoleAdminChanged,
    RewardsClaimed,
    RewardTokensWithdrawn,
    RewardTokensDeposited,
    ReferralMade,
    ReferralFailed,
    Paused,
    MinLpTokenAmountUpdated,
    MaxRewardRateIncreased,
    GlobalRootUpdated,
    ChangeProposed,
    ChangeExecuted,
    CampaignCreated
}

interface IGhostGraph {
    function getPlayer(address id) external returns (Player memory);
    function getLPToken(address id) external returns (LPToken memory);
    function getPlayerLPTokenHolding(bytes32 id) external returns (PlayerLPTokenHolding memory);
    function getCampaign(bytes32 id) external returns (Campaign memory);
    function getPlayerCampaign(bytes32 id) external returns (PlayerCampaign memory);
    function getRewardClaim(bytes32 id) external returns (RewardClaim memory);
    function getBalanceSnapshot(bytes32 id) external returns (BalanceSnapshot memory);
    function savePlayer(Player memory player) external returns (bool);
    function saveLPToken(LPToken memory lPToken) external returns (bool);
    function savePlayerLPTokenHolding(PlayerLPTokenHolding memory playerLPTokenHolding) external returns (bool);
    function saveCampaign(Campaign memory campaign) external returns (bool);
    function savePlayerCampaign(PlayerCampaign memory playerCampaign) external returns (bool);
    function saveRewardClaim(RewardClaim memory rewardClaim) external returns (bool);
    function saveBalanceSnapshot(BalanceSnapshot memory balanceSnapshot) external returns (bool);
    function registerHandle(address addr) external returns (bool);
    function registerFactory(address addr, GhostEventName eventName, string memory param) external returns (bool);
    
    // helper methods
    function ghostToString(address value) external returns (string memory);
    function ghostToString(bytes calldata value) external returns (string memory);
    function ghostToString(bytes32 value) external returns (string memory);
    function ghostToString(bool value) external returns (string memory);
    function ghostToString(uint256 value) external returns (string memory);
    function ghostToString(int256 value) external returns (string memory);
    function ghostIsContract(address addr) external returns (bool);
}

contract GhostGraph {

    IGhostGraph public constant graph = IGhostGraph(address(0x0011223344));
}